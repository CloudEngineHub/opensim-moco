/** The Moco interface is contained within the OpenSim namespace.
*/
// We must document the OpenSim namespace for free functions within the
// namespace to appear in Doxygen.
namespace OpenSim {
/** @mainpage

Moco is a module of OpenSim for solving optimal control problems for
musculoskeletal systems defined as OpenSim models.
The package has Python, MATLAB, and XML (command-line) interfaces; the core
library is written in C++. Here are some problems you can solve with Moco:

1. Solve for the muscle activity that tracks a known motion.
2. Solve for a new motion that optimizes some cost (e.g., effort).
3. Solve for mass properties that minimize residual (unrealistic) forces.

The optimal control problems are solved using the direct collocation method.
Direct collocation itself is beyond the scope of this documentation; see
the following excellent material:

  - Short paper: Kelly, M. (2017). An introduction to trajectory optimization:
    how to do your own direct collocation. SIAM Review, 59(4), 849-904.
    https://doi.org/10.1137/16M1062569
  - Textbook: Betts, J. T. (2010). Practical methods for optimal control and
    estimation using nonlinear programming (Vol. 19). Siam.

Moco can solve specific classes of problems, such as motion tracking and muscle
redundancy, and has a generic interface for solving custom optimal control
problems. Solving a custom optimal control problem with direct collocation
requires substantial tuning of the direct collocation method's settings. Use the
more specific interfaces if possible.

Where to start?
 - @ref mocotool "Solving for muscle activity that tracks an observed motion"
 - @ref mocostudy "Defining a custom optimization problem"
 - @ref mocouserguide "User Guide: Learning how to use Moco"
 - @ref mocotheoryguide "Theory Guide: Learning how Moco solves optimal control problems"
 - @ref mocodevguide "Developer Guide: Learning the Moco codebase and how to contribute"
 - @ref mocoapiref "Interface Reference"


@defgroup mocogoal Available goals

These are the available goals you can use in your cost functional or as boundary
constraints. If none of these satisfy your needs, you can define your own using
a plugin.

*/

} // namespace OpenSim

