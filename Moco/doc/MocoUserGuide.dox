namespace OpenSim {
/** @mainpage

OpenSim Moco is a software package for solving optimal control problems for
musculoskeletal systems modeled in OpenSim.
The package has Python, MATLAB, and XML (command-line) interfaces; the core
library is written in C++. Here are some problems you can solve with Moco:

1. Solve for the muscle activity that tracks a known motion.
2. Solve for a new motion that optimizes some cost functional.
3. Solve for mass properties that minimize residual "hand of God" forces.

The optimal control problems are solved using the direct collocation method.
Learning about direct collocation is beyond the scope of this documentation. See
the following references:

  - TODO Matt Kelly's paper.

Moco can solve specific classes of problems, such as tracking, TODO, and
also has a generic interface for solving custom optimal control problems.

@note Solving a custom optimal control problem with direct collocation is not
easy, and requires significant tuning of the direct collocation method's
settings. Use the more specific interfaces if possible; and only create a custom
problem as a last resort.

Parts of the documentation:
  - @ref userguide



@page userguide User Guide

@tableofcontents

TODO

MocoFramework
MocoTrack

HELLO

@section Example

TODO

The interface to Moco starts with the MocoTool. The MocoTool contains a
MocoProblem and a MocoSolver.

  - MocoProblem: describes the variables, dynamics, constraints, and cost
      functional of the optimal control problem.
  - MocoSolver: solves the MocoProblem using direct collocation.


@section Workflow

When building a MocoTool programmatically (e.g., in C++), the workflow is as
follows:

1. Build the MocoProblem (set the model, constraints, etc.).
2. Call MocoTool::initTropterSolver() (or MocoTool::initCasADiSolver()), which
   returns a reference to a MocoSolver.
3. Edit the settings of the MocoSolver (returned by initSolver()).
4. Call MocoTool::solve(). This returns the MocoSolution.
5. (Optional) Postprocess the solution, perhaps using MocoTool::visualize().

After calling MocoTool::solve(), you can edit the MocoProblem and/or the
MocoSolver and call MocoTool::solve() again, if you wish.


@section MocoProblem

A MocoProblem contains multiple phases.

TODO describe bounds (set automatically based on the model).

    ///     The bounds on this state variable over the entire phase. If
    ///     default-constructed (`{}`), and the state is *not* a coordinate
    ///     value, then no bounds are applied. If default-constructed, the state
    ///     *is* a coordinate value and the coordinate's **clamped** property is
    ///     true, then the bounds are set to the coordinate's **range** (see
    ///     Coordinate::clamped and Coordinate::range). (TODO)

@subsection costfunctional Defining the cost functional

See @ref mococost for more information.

@section MocoSolver

A MocoSolver attempts to use an optimal control method to solve the MocoProblem,
and exposes the settings that you can use to

@subsection MocoTropterSolver

@par Dynamics mode: implicit

When using the implicit dynamics mode, the differential equations for multibody
dynamics are expressed as implicit differential equations. That is, they are
in the form \f$ 0 = f(x, \dot{x}) \f$ rather than \f$ \dot{x} = f(x) \f$.

The following are not currently supported with implicit dynamics:

1. Auxiliary dynamics (e.g., activation and fiber dynamics).
2. Acceleration-level quantities (e.g., MocoJointReactionNormCost).
3. Multibody constraints.


@subsection Kinematic constraints

Moco supports enforcing OpenSim kinematic constraints in optimal control 
problems. When the MocoTropterSolver is initialized, any kinematic constraints 
enabled in the model are automatically detected, and additional information
about each constraint is stored. This information includes the number of scalar
path constraints (including derivatives if they exist), the scalar constraint 
kinematic levels (i.e. holonomic, non-holonomic, or acceleration), and the 
number of Lagrange multipliers that are added to the problem to enforce the
constraints. 

MocoTropterSolver has options if the user desires to enforce kinematic 
constraint derivatives or minimize Lagrange multipliers in the problem.

\code{.cpp}
MocoTropterSolver& solver = moco.initSolver();
ms.set_enforce_constraint_derivatives(true);
ms.set_lagrange_multiplier_weight(10);
\endcode

If constraint derivatives are enforced, velocity correction variables are added
to the problem according to the method described in Posa, Kuindersma, and
Tedrake, 2016, "Optimization and stabilization of trajectories for constrained
dynamical systems." It is also possible to modify the default bounds on these 
velocity correction variables:

\code{.cpp}
// Default bounds: [-0.1, 0.1]
ms.set_velocity_correction_bounds({-0.25, 0.25});
\endcode

If constraint derivatives are not enforced or if the multibody constraint 
Jacobian is rank-deficient, it is recommended that the Lagrange multiplier 
minimization term is added to the problem to provide impose uniqueness for 
these variables.

@section tips Tips for solving a custom problem

1. Make sure every variable has bounds.

*/

/**
@defgroup mococost Available cost terms

These are the available cost terms you can use in your cost functional. If none
of these satisfy your needs, you can define your own using a plugin.
*/

} // namespace OpenSim

